root: true
parser: '@typescript-eslint/parser'
parserOptions:
  project: 'tsconfig.eslint.json'
plugins:
  - '@typescript-eslint'
  - 'return-types-object-literals'
rules:
  '@typescript-eslint/no-redeclare': off
  'new-cap': off
  'no-case-declarations': off
  'no-fallthrough': off
  'no-else-return': warn
  'no-var': warn
  'object-shorthand':
    - off
    - properties
  'array-callback-return': off
  '@typescript-eslint/array-type':
    - off
    - default: array
  'return-types-object-literals/require-return-types-for-object-literals': error
  '@typescript-eslint/explicit-function-return-type':
    - off
    - allowExpressions: true
      allowTypedFunctionExpressions: true
      allowHigherOrderFunctions: true
      allowDirectConstAssertionInArrowFunctions: true
      allowConciseArrowFunctionExpressionsStartingWithVoid: false
  '@typescript-eslint/restrict-template-expressions':
    - error
    - allowBoolean: true
  '@typescript-eslint/no-var-requires': error
  '@typescript-eslint/no-non-null-assertion': off
  '@typescript-eslint/no-extra-non-null-assertion': off
  '@typescript-eslint/promise-function-async': off
  'default-param-last': off
  '@typescript-eslint/default-param-last': error
  'promise/prefer-await-to-callbacks': off
  '@typescript-eslint/no-unnecessary-type-assertion': off
  '@typescript-eslint/no-misused-promises': off
  '@typescript-eslint/strict-boolean-expressions': off
  '@typescript-eslint/return-await': off
  '@typescript-eslint/no-namespace': off
  '@typescript-eslint/no-empty-interface': off
  '@typescript-eslint/restrict-plus-operands': error
  '@typescript-eslint/consistent-type-assertions': off
  'no-unused-vars': off
  '@typescript-eslint/no-unused-vars':
    - warn
    - ignoreRestSiblings: true
      args: 'after-used'
      argsIgnorePattern: '^_'
      varsIgnorePattern: '^_'
extends:
  - standard-with-typescript
  - prettier
env:
  node: true
